name: Build and Deploy Docker Image to EC2

on:
  push:
    branches:
      - main  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2

     
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

    
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-image:latest .

      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  
          password: ${{ secrets.DOCKER_PASSWORD }}  
    
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-image:latest

      # - name: configuration of aws CLI
      #   run: | 
      #     mkdir -p ~/.aws
      #     echo "[default]" > ~/.aws/credentials
      #     echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
      #     echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      #doning ssh
      - name: Set up SSH and login to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          touch ~/.ssh/known_hosts
          ssh-keyscan -H 13.201.137.159 >> ~/.ssh/known_hosts

      - name: Deploying on EC2
        run: | 
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@13.201.137.159 << 'EOF'
          # SSH into EC2 and prepare the environment
          set -e  # Exit on error
          set -x  # Print commands
        
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
        
          # Pull the latest image from Docker Hub
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-image:latest
        
          # Stop any running containers
          sudo docker stop my-nginx-container || true
          sudo docker rm my-nginx-container || true
        
          # Run the new Docker container with NGINX
          sudo docker run -d --name my-nginx-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-nginx-image:latest
        
          EOF
        
